"""
import math
import random
import matplotlib.pyplot as plt

class Node:
    def _init_(self, name, community):
        self.name = name
        self.community = community
        self.neighbors = []
        self.messages = []

class Message:
    def _init_(self, source, destination, max_copies):
        self.source = source
        self.destination = destination
        self.max_copies = max_copies

def calculate_encounter_probability(node, destination, lambda_mn=0.5):
    """
    Calculate the encounter probability between node and destination.
    
    Args:
    - node: Source node.
    - destination: Destination node.
    - lambda_mn: Encounter strength parameter.
    
    Returns:
    - Encounter probability between node and destination.
    """
    # Calculate average time between encounters
    tmn = [random.randint(0, 100) for _ in range(10)]  # Sample encounter times
    avg_time = calculate_average_encounter_time(tmn)
    
    # Calculate encounter probability using exponential decay model
    encounter_probability = 1 - math.exp(-lambda_mn * avg_time)
    return encounter_probability

def calculate_average_encounter_time(tmn):
    """
    Calculate the average time between encounters.
    
    Args:
    - tmn: List of encounter times between node m and node n.
    
    Returns:
    - Average time between node m and node n encounters.
    """
    if len(tmn) == 0:
        return None

    sum_diff = 0
    for i in range(len(tmn) - 1):
        diff = tmn[i + 1] - tmn[i]
        sum_diff += diff
    
    return sum_diff / len(tmn)

def determine_community_membership(node, destination, encounter_probability_threshold=0.5):
    """
    Determine the community membership of the node based on encounter probabilities.
    
    Args:
    - node: Node for which community membership needs to be determined.
    - destination: Destination node for message transmission.
    - encounter_probability_threshold: Threshold encounter probability for community membership.
    
    Returns:
    - Community to which the node belongs.
    """
    encounter_probability = calculate_encounter_probability(node, destination)
    if encounter_probability >= encounter_probability_threshold:
        return node.community
    else:
        return None

def determine_transmission_probability(encounter_probability):
    """
    Determine the transmission probability based on encounter probability.
    
    Args:
    - encounter_probability: Encounter probability between the source and destination nodes.
    
    Returns:
    - Transmission probability for message forwarding.
    """
    return min(encounter_probability * 2, 1.0)

def adjust_spraying_mechanism(message, neighbors, encounter_probability_threshold=0.5):
    """
    Adjust the spraying mechanism based on encounter probabilities with neighbors.
    
    Args:
    - message: Message to be sprayed into the network.
    - neighbors: List of neighboring nodes.
    - encounter_probability_threshold: Threshold encounter probability for spraying.
    
    Returns:
    - Number of message copies to be sprayed into the network.
    """
    num_high_probability_neighbors = sum(1 for neighbor in neighbors if calculate_encounter_probability(neighbor, message.destination) >= encounter_probability_threshold)
    return max(1, min(message.max_copies, num_high_probability_neighbors))

# EDCD Algorithm
def edcd_algorithm(nodes):
    delivery_count = 0
    total_messages = 0
    for node in nodes:
        for message in node.messages:
            total_messages += 1
            community = determine_community_membership(node, message.destination)
            if community is not None:
                relay_node = select_relay_node_within_community(community)
                forward_message(message, relay_node)
                delivery_count += 1
    return delivery_count / total_messages, total_messages - delivery_count

# EIMST Algorithm
def eimst_algorithm(nodes):
    delivery_count = 0
    total_messages = 0
    for node in nodes:
        for message in node.messages:
            total_messages += 1
            encounter_probability = calculate_encounter_probability(node, message.destination)
            transmission_probability = determine_transmission_probability(encounter_probability)
            if random.random() <= transmission_probability:
                forward_message_with_probability(message, transmission_probability)
                delivery_count += 1
    return delivery_count / total_messages, total_messages - delivery_count

# Spray and Wait Algorithm
def spray_and_wait_algorithm(nodes):
    delivery_count = 0
    total_messages = 0
    for node in nodes:
        for message in node.messages:
            total_messages += 1
            num_copies = adjust_spraying_mechanism(message, node.neighbors)
            spray_message_copies(message, num_copies)
            wait_time = random.randint(1, 10)  # Simulate waiting time
            wait(wait_time)
            if wait_time <= 5:  # Arbitrary condition for forwarding message
                forward_message_if_conditions_met(message)
                delivery_count += 1
    return delivery_count / total_messages, total_messages - delivery_count

# Placeholder functions for message forwarding
def forward_message(message, relay_node):
    print(f"Forwarding message from {message.source} to {message.destination} via {relay_node}")

def forward_message_with_probability(message, transmission_probability):
    print(f"Forwarding message from {message.source} to {message.destination} with transmission probability {transmission_probability}")

def spray_message_copies(message, num_copies):
    print(f"Spraying {num_copies} copies of message from {message.source} to {message.destination}")

def wait(wait_time):
    print(f"Waiting for {wait_time} seconds")

def forward_message_if_conditions_met(message):
    print(f"Forwarding message from {message.source} to {message.destination} after waiting")

# Helper function to select relay node within the community
def select_relay_node_within_community(community):
    # Placeholder implementation: Random selection of a node within the community
    return random.choice(community)

# Sample network setup
nodes = [Node("Node1", "Community1"), Node("Node2", "Community1"), Node("Node3", "Community2")]
messages = [Message("Node1", "Node2", 3), Message("Node2", "Node3", 2)]

for node in nodes:
    node.messages = messages

# Run algorithms
edcd_delivery_ratio, edcd_routing_overhead = edcd_algorithm(nodes)
eimst_delivery_ratio, eimst_routing_overhead = eimst_algorithm(nodes)
spray_and_wait_delivery_ratio, spray_and_wait_routing_overhead = spray_and_wait_algorithm(nodes)

print("EDCD Algorithm:")
print(f"Delivery Ratio: {edcd_delivery_ratio}")
print(f"Routing Overhead: {edcd_routing_overhead}")

print("\nEIMST Algorithm:")
print(f"Delivery Ratio: {eimst_delivery_ratio}")
print(f"Routing Overhead: {eimst_routing_overhead}")

print("\nSpray and Wait Algorithm:")
print(f"Delivery Ratio: {spray_and_wait_delivery_ratio}")
print(f"Routing Overhead: {spray_and_wait_routing_overhead}")

# Plotting the results
algorithms = ['EDCD', 'EIMST', 'Spray and Wait']
delivery_ratios = [edcd_delivery_ratio, eimst_delivery_ratio, spray_and_wait_delivery_ratio]
routing_overheads = [edcd_routing_overhead, eimst_routing_overhead, spray_and_wait_routing_overhead]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

ax1.bar(algorithms, delivery_ratios, color='skyblue')
ax1.set_title('Delivery Ratio')
ax1.set_ylabel('Ratio')
ax1.set_ylim(0, 1)

ax2.bar(algorithms, routing_overheads, color='salmon')
ax2.set_title('Routing Overhead')
ax2.set_ylabel('Overhead')

plt.tight_layout()
plt.show()